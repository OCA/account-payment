-
  I create customer invoice 3 - 230 EUR
-
  !record {model: account.invoice, id: account_invoice_customer_bank_3, view: invoice_form}:
    journal_id: account.sales_journal
    partner_id: base.res_partner_8
    account_id: ds
    vat_on_payment: True
    invoice_line:
      - quantity: 1
        account_id: account.a_sale
        name: 'Service'
        price_unit: 100.0
        invoice_line_tax_id:
          - tax20
      - quantity: 1
        account_id: account.a_sale
        name: 'Service'
        price_unit: 100.0
        invoice_line_tax_id:
          - tax10
-
  I create invoice by clicking on Create button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_bank_3}
-
  I check the invoice
-
  !python {model: account.invoice}: |
    invoice = self.browse(cr, uid, ref('account_invoice_customer_bank_3'), context=context)
    assert len(invoice.move_id.line_id) == 4, "There must be 4 move lines, %s found" % len(invoice.move_id.line_id)
    for move_line in invoice.move_id.line_id:
      if move_line.account_id.id == ref('ds'):
        assert move_line.debit == 230, "Shadow credit must be 230 debit %s found" % move_line.debit
      if move_line.account_id.id == ref('ivas'):
        assert move_line.credit == 30, "Shadow VAT must be 30 credit %s found" % move_line.credit
      if move_line.account_id.id == ref('pss'):
        # 2 times: sales lines are 2
        assert move_line.credit == 100, "Shadow sales must be 100 credit %s found" % move_line.credit
-
  I create a bank statement
-
  !record {model: account.bank.statement, id: bank_statement_3a}:
    name: BK test
    balance_end_real: 0.0
    balance_start: 0.0
    date: !eval time.strftime('%Y-%m-%d')
    journal_id: account.bank_journal
-
  I create bank statement line
-
  !record {model: account.bank.statement.line, id: bank_statement_line_3a}:
    amount: 100
    partner_id: base.res_partner_8
    statement_id: bank_statement_3a
    name: 'Pay invoice'
    journal_id: account.bank_journal
-
  I reconcile the invoice with the statement line.
-
  !python {model: account.bank.statement}: |
    statement_obj = self.pool.get('account.bank.statement.line')
    inv_obj = self.pool.get('account.invoice')
    invoice = inv_obj.browse(cr, uid, ref('account_invoice_customer_bank_3'), context=context)
    invoice_entry = invoice.move_id
    for line in invoice_entry.line_id:
      if not line.reconcile_id and line.debit:
          counterpart_move_line = line
          break
    browse_payment = self.browse(cr, uid, ref("bank_statement_3a"))
    for line in browse_payment.line_ids:
      statement_obj.process_reconciliation(cr, uid, line.id, [{
        'counterpart_move_line_id': counterpart_move_line.id,
        'credit':100,
        'debit':0,
        'name': counterpart_move_line.name,
      }])
    self.write(cr, uid, ref("bank_statement_3a"), {'balance_end_real': 100})
    self.button_confirm_bank(cr, uid, ref("bank_statement_3a"))
-
  I check that the bank statement is confirm
-
  !assert {model: account.bank.statement, id: bank_statement_3a, severity: error, string: Bank Statement should be confirm}:
    - state == 'confirm'
-
  I check the bank statement line
-
  !python {model: account.bank.statement.line}: |
    bank_line = self.browse(cr, uid, ref('bank_statement_line_3a'), context=context)
    assert len(bank_line.journal_entry_id.line_id) == 2, "There must be 2 real move lines, %s found" % len(bank_line.journal_entry_id.line_id)
    assert len(bank_line.shadow_move_id.line_id) == 6, "There must be 6 shadow move lines, %s found" % len(bank_line.shadow_move_id.line_id)
    bank_found = False
    vat_found = False
    sales_found = False
    for move_line in bank_line.journal_entry_id.line_id:
      if move_line.account_id.id == ref('account.bnk'):
        bank_found = True
        assert move_line.debit == 100, "Bank move line must be 100 debit, %s found" % move_line.debit
    for move_line in bank_line.shadow_move_id.line_id:
      if move_line.account_id.id == ref('account.iva'):
        vat_found = True
        assert abs(move_line.credit - 13.04) < 0.01, "VAT move line must be 13.04 credit, %s found" % move_line.credit
      if move_line.account_id.id == ref('account.a_sale'):
        sales_found = True
        assert abs(move_line.credit - 43.48) < 0.01, "sales move line must be 43.48 credit, %s found" % move_line.credit
    assert bank_found, "No bank move line found"
    assert sales_found, "No sales move line found"
    assert vat_found, "No VAT move line found"
-
  I check that the invoice state is open
-
  !assert {model: account.invoice, id: account_invoice_customer_bank_3}:
    - state == 'open'
-
  I create a bank statement
-
  !record {model: account.bank.statement, id: bank_statement_3b}:
    name: BK test
    balance_end_real: 0.0
    balance_start: 0.0
    date: !eval time.strftime('%Y-%m-%d')
    journal_id: account.bank_journal
-
  I create bank statement line
-
  !record {model: account.bank.statement.line, id: bank_statement_line_3b}:
    amount: 130
    partner_id: base.res_partner_8
    statement_id: bank_statement_3b
    name: 'Pay invoice'
    journal_id: account.bank_journal
-
  I reconcile the invoice with the statement line.
-
  !python {model: account.bank.statement}: |
    statement_obj = self.pool.get('account.bank.statement.line')
    inv_obj = self.pool.get('account.invoice')
    invoice = inv_obj.browse(cr, uid, ref('account_invoice_customer_bank_3'), context=context)
    invoice_entry = invoice.move_id
    for line in invoice_entry.line_id:
      if not line.reconcile_id and line.debit:
          counterpart_move_line = line
          break
    browse_payment = self.browse(cr, uid, ref("bank_statement_3b"))
    for line in browse_payment.line_ids:
      statement_obj.process_reconciliation(cr, uid, line.id, [{
        'counterpart_move_line_id': counterpart_move_line.id,
        'credit':130,
        'debit':0,
        'name': counterpart_move_line.name,
      }])
    self.write(cr, uid, ref("bank_statement_3b"), {'balance_end_real': 130})
    self.button_confirm_bank(cr, uid, ref("bank_statement_3b"))
-
  I check that the bank statement is confirm
-
  !assert {model: account.bank.statement, id: bank_statement_3b, severity: error, string: Bank Statement should be confirm}:
    - state == 'confirm'
-
  I check the bank statement line
-
  !python {model: account.bank.statement.line}: |
    bank_line = self.browse(cr, uid, ref('bank_statement_line_3b'), context=context)
    assert len(bank_line.journal_entry_id.line_id) == 2, "There must be 2 real move lines, %s found" % len(bank_line.journal_entry_id.line_id)
    assert len(bank_line.shadow_move_id.line_id) == 6, "There must be 6 shadow move lines, %s found" % len(bank_line.shadow_move_id.line_id)
    bank_found = False
    vat_found = False
    sales_found = False
    for move_line in bank_line.journal_entry_id.line_id:
      if move_line.account_id.id == ref('account.bnk'):
        bank_found = True
        assert move_line.debit == 130, "Bank move line must be 130 debit, %s found" % move_line.debit
    for move_line in bank_line.shadow_move_id.line_id:
      if move_line.account_id.id == ref('account.iva'):
        vat_found = True
        assert abs(move_line.credit - 16.96) < 0.01, "VAT move line must be 16.96 credit, %s found" % move_line.credit
      if move_line.account_id.id == ref('account.a_sale'):
        sales_found = True
        assert abs(move_line.credit - 56.52) < 0.01, "sales move line must be 56.52 credit, %s found" % move_line.credit
    assert bank_found, "No bank move line found"
    assert sales_found, "No sales move line found"
    assert vat_found, "No VAT move line found"
-
  I check that the invoice state is paid
-
  !assert {model: account.invoice, id: account_invoice_customer_bank_3}:
    - state == 'paid'
