-
  Change Company VAT Payment Lines Behaviour to use same account
-
  !python {model: res.company}: |
    self.write(cr, uid, [ref('base.main_company')], {
      'vat_payment_lines': 'real_move',
      'vat_config_error': 'use_the_same'
      })
    self.pool['account.account'].write(cr, uid, [ref('account.a_sale')], {
      'vat_on_payment_related_account_id': None,
    })
-
  I create customer invoice 1 - 120 EUR
-
  !record {model: account.invoice, id: account_invoice_customer_1_same, view: invoice_form}:
    journal_id: account.sales_journal
    partner_id: base.res_partner_5
    account_id: ds
    vat_on_payment: True
    invoice_line:
      - quantity: 1
        account_id: account.a_sale
        name: 'Service'
        price_unit: 100.0
        invoice_line_tax_id:
          - tax20
-
  I create invoice by clicking on Create button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_1_same}
-
  I check the invoice
-
  !python {model: account.invoice}: |
    invoice = self.browse(cr, uid, ref('account_invoice_customer_1_same'), context=context)
    assert len(invoice.move_id.line_id) == 3, "There must be 3 move lines, %s found" % len(invoice.move_id.line_id)
    for move_line in invoice.move_id.line_id:
      if move_line.account_id.id == ref('ds'):
        assert move_line.debit == 120, "Shadow credit must be 120 debit %s found" % move_line.debit
      if move_line.account_id.id == ref('ivas'):
        assert move_line.credit == 20, "Shadow VAT must be 20 credit %s found" % move_line.credit
      if move_line.account_id.id == ref('account.a_sale'):
        assert move_line.credit == 100, "Shadow sales must be 100 credit %s found" % move_line.credit
-
  I set the context that will be used for the encoding of all the vouchers of this file
-
  !context
    'type': 'receipt'
-
  I create the payment voucher
-
  !record {model: account.voucher, id: account_voucher_1_same, view: account_voucher.view_vendor_receipt_form}:
    journal_id: account.bank_journal
    partner_id: base.res_partner_5
    amount: 120
-
  I confirm the voucher
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_1_same}
-
  I check the voucher
-
  !python {model: account.voucher}: |
    voucher = self.browse(cr, uid, ref('account_voucher_1_same'), context=context)
    assert len(voucher.move_id.line_id) == 2, "There must be 2 real move lines, %s found" % len(voucher.move_id.line_id)
    assert len(voucher.shadow_move_id.line_id) == 4, "There must be 4 shadow move lines, %s found" % len(voucher.shadow_move_id.line_id)
    bank_found = False
    vat_found = False
    sales_found = False
    for move_line in voucher.move_id.line_id:
      if move_line.account_id.id == ref('account.bnk'):
        bank_found = True
        assert move_line.debit == 120, "Bank move line must be 120 debit, %s found" % move_line.debit
    for move_line in voucher.shadow_move_id.line_id:
      if move_line.account_id.id == ref('account.iva'):
        vat_found = True
        assert move_line.credit == 20, "VAT move line must be 120 credit, %s found" % move_line.credit
      if move_line.account_id.id == ref('account.a_sale'):
        sales_found = True
        assert move_line.credit == 0, "sales move line must be 0 credit, %s found" % move_line.credit
        assert move_line.debit == 0, "sales move line must be 0 debit, %s found" % move_line.debit
        if move_line.tax_code_id.id == ref('base_shadow_tax_code'):
          assert move_line.tax_amount == -100, "sales move line must be -100 shadow tax amount, %s found" % move_line.tax_amount
        if move_line.tax_code_id.id == ref('base_tax_code_received'):        
          assert move_line.tax_amount == 100, "sales move line must be 100 real tax amount, %s found" % move_line.tax_amount
    assert bank_found, "No bank move line found"
    assert sales_found, "No sales move line found"
    assert vat_found, "No VAT move line found"
    voucher.refresh()
    assert voucher.move_id.state != 'draft', 'Move state != posted: %s' % voucher.move_id.state
    assert voucher.shadow_move_id.state != 'draft', 'Shadow move state != posted: %s' % voucher.shadow_move_id.state
-
  I check that the invoice state is paid
-
  !assert {model: account.invoice, id: account_invoice_customer_1_same}:
    - state == 'paid'
-
  !python {model: account.account}: |
    self.write(cr, uid, [ref('account.a_sale')], {
      'vat_on_payment_related_account_id': ref('pss'),
    })
